%%%-------------------------------------------------------------------
%%% @author alituhikyaj
%%% @doc
%%% ug_phone_regex => ^((\+256\s?)|0)7[0145789][0-9]\s?\d{6}$
%%% erlang requires double slash: "^((\\+256\\s?)|0)7[0145789][0-9]\\s?\\d{6}$"
%%% <a href ="http://erlang.org/pipermail/erlang-bugs/2012-November/003175.html">link<a>
%%% regex for phone number any ugandan number
%%% should match only ugandan networks that is 071, 077,078,079,074, 075,070
%%% <b>examples:<b><br>
%%% 0715726287
%%% 0715 726287
%%% +256715726287
%%% +256 715726287
%%% compiled to avoid recompiling each time re:run is called
%%% @end
%%%-------------------------------------------------------------------
-define(ug_phone_regex, validator:get_compiled_re("^((256))[347][02145789][0-9]\\d{6}$")).

-define(ug_phone_mtn_regex, validator:get_compiled_re("^((256))7[78][0-9]\\d{6}$")).
-define(ug_phone_mtn_co_regex, validator:get_compiled_re("^((256))[3][129][0-9]\\d{6}$")).
-define(ug_phone_airtel_regex, validator:get_compiled_re("^((256))7[05][0-9]\\d{6}$")).
-define(ug_phone_africell_regex, validator:get_compiled_re("^((256))79[0-9]\\d{6}$")).
-define(ug_phone_utl_regex, validator:get_compiled_re("^((256))71[0-9]\\d{6}$")).
-define(ug_phone_smart_regex, validator:get_compiled_re("^((256))74[0-9]\\d{6}$")).

-define(white_space_regex, validator:get_compiled_re("(^\\s+)|(\\s+$)")).

-define(underscore_global_regex, validator:get_compiled_re("(_)")).
-define(empty_regex, validator:get_compiled_re("^$")).
-define(empty_whitespace_regex, validator:get_compiled_re("^\\s+$")).
-define(name_regex, validator:get_compiled_re("^[a-zA-Z]'?[a-zA-Z\s]{2,20}$")).
-define(password_regex, validator:get_compiled_re("^[0-9]{4}$")).
-define(gender_regex, validator:get_compiled_re("[M|F]$")).
-define(dob_regex, validator:get_compiled_re("^[0-9]{10}$")).
-define(national_id_regex, validator:get_compiled_re("^[0-9]{10}$")).
-define(question_regex, validator:get_compiled_re("^[A-Z][A-Za-z][A-Za-z ']*[?]$")).
-define(answer_regex, validator:get_compiled_re("^[A-Za-z0-9]*[A-Za-z0-9][A-Za-z0-9 _',.!-]*$")).
-define(country_regex, validator:get_compiled_re("^[A-Za-z]*[A-Za-z][A-Za-z ']*$")).

%%%-------------------------------------------------------------------
%%% @author alituhikyaj
%%% @doc
%%% ug_phone_added_zero_regex,"^(\+?256\s?)07[0145789][0-9]\s?\d{6}$"
%%% regex for phone number any ugandan number with added zero</br>
%%% of adding a zero (0) after 256 and missing a plus + </br>
%%% eg 2560712726287,256 0712726287... </br>
%%% this check should be run after the valid ug_phone_regex since it accepts valid numbers also
%%% @end
%%%-------------------------------------------------------------------
-define(ug_phone_added_zero_regex, validator:get_compiled_re("^(\\+?256\\s?)07[0145789][0-9]\\s?\\d{6}$")).

%%%-------------------------------------------------------------------
%%% @author alituhikyaj
%%% @doc
%%% ug_phone_missing_plus_regex,"^(256\s?)0?7[0145789][0-9]\s?\d{6}$"
%%% regex for phone number any ugandan number with missing plus</br>
%%% of adding a zero (0) after 256 and missing a plus + </br>
%%% eg 256712726287, 2560712726287... </br>
%%% this check should be run after the valid ug_phone_regex since it accepts valid numbers also
%%% @end
%%%-------------------------------------------------------------------
-define(ug_phone_missing_plus_regex, validator:get_compiled_re("^(256\\s?)0?7[0145789][0-9]\\s?\\d{6}$")).

-define(integer_regex, validator:get_compiled_re("^[0-9]*$")).

-define(GUID_CHARACTERS, "ABCDEFGHIJKLMNPQRSTUVWXYZbdcefghijklmnpqrstuvwxyz123456789").

-define(TRANSACTION_ID_LENGTH, 8).

-define(NETWORKS, [mtn, airtel, utl, africell, smart]).

%%%%----------------------------------------------------------------------------------------------------------
%%%                                             Error Messages
%%%%----------------------------------------------------------------------------------------------------------
-define(ERROR_MESSAGE_BAD_LENGTH, <<"the request is of bad length">>).

-define(ERROR_MESSAGE_AUTHENTICATION, <<"authentication error">>).
-define(ERROR_MESSAGE_FATAL, <<"A severe error occured">>).
%%% allowed error messages
-define(ERROR_MESSAGE_REQUEST_TYPE_NOT_FOUND, <<"failed to find request type provided in url">>).
-define(ERROR_MESSAGE_REQUEST_NAME_NOT_FOUND, <<"failed to find request name provided in url">>).
-define(ERROR_MESSAGE_REQUEST_OPERATION_NOT_FOUND, <<"failed to find operation provided in url">>).
-define(ERROR_MESSAGE_REQUEST_USER_TYPE_NOT_AUTHORIZED, <<"User Type provided not Authorized to perform this operation">>).



%%%%----------------------------------------------------------------------------------------------------------
%%%                                             Authorizes
%%%%----------------------------------------------------------------------------------------------------------

-define(ALLOWED_PROCESSORS, [sync,async]).

-define(IP, core_util:get_ip()).

%%%%----------------------------------------------------------------------------------------------------------
%%%                                             STATES
%%%%--------------------------------------------------------------------------------------

-define(STATE_PROCESSING_ERROR, <<"processing error">>).


%%%%----------------------------------------------------------------------------------------------------------
%%%                                            Supervisor Names
%%%%----------------------------------------------------------------------------------------------------------


-define(EXPIRABLE_SUPERVISOR_NAME, expirable_sup).
-define(ASYNC_RUNNER_SUPERVISOR_NAME, async_runner_sup).

-define(max_amount, 5000000).
-define(min_amount, 100).


%%%%----------------------------------------------------------------------------------------------------------
%%%                                             GProc
%%%%----------------------------------------------------------------------------------------------------------
-define(WSKey, {pubsub, wsbroadcast}).


%%%%----------------------------------------------------------------------------------------------------------
%%%                                             TYPES
%%%%----------------------------------------------------------------------------------------------------------


-type(amount() :: ?min_amount..?max_amount).
-type(error() :: {error, term()}|{ok}).
-type(network() :: mtn|utl|airtel|africell|smart|vodafone|smile).
-record(http_async_return, {
  status,
  headers,
  body = <<"">>,
  reason,
  ref,
  state,
  message
}).

-record(core_request, {
  request_id,
  processor,
  processor_name,
  operation,
  args_list,
  archiver_pid,
  type,
  name,
  trace,
  message,
  api_user_type = unkown,
  api_user,
  retry_count,
  max_retry_count,
  process_step = 0,
  state,
  async_runner_pid,
  body_type,
  raw_body,
  caller
}).

-record(core_request_return, {
  success :: atom(),
  message :: term(),
  request_id :: atom(),
  payload
}).

-record(payment,{
   amount,
   phone_number,
   network,
   reason,
   transaction_id,
   receipt_id,
   type,
   customer_id,
   email
}).

-record(cassandra_settings, {
  cassandra_contact_point,
  cassandra_port,
  keyspace
}).

-record(postgres_settings,{
pg_ip = "localhost",
pg_username = "core",
pg_password = "Uganda256!",
pg_database = "core",
pg_connect_timeout= 5000

}).

-record(expirable_state, {
  task,
  data,
  return,
  name,
  timeout,
  timeout_ref
}).

-record(ws_event, {event, payload}).

-record(async_state, {
  name,
  task,
  data
}).

-record(account_action, {
  amount,
  account_number,
  account_type,
  transaction_id,
  user_type,
  level =0,
  notify_id,
  transaction_type = <<"N/A">>
}).
